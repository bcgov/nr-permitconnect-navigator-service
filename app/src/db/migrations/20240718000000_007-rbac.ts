/* eslint-disable max-len */
import { v4 as uuidv4 } from 'uuid';

import stamps from '../stamps';

import type { Knex } from 'knex';
import { Action, GroupName, Initiative, Resource } from '../../utils/enums/application';

const resources = [
  {
    name: Resource.DOCUMENT
  },
  {
    name: Resource.ENQUIRY
  },
  {
    name: Resource.NOTE
  },
  {
    name: Resource.PERMIT
  },
  {
    name: Resource.ROADMAP
  },
  {
    name: Resource.SSO
  },
  {
    name: Resource.SUBMISSION
  },
  {
    name: Resource.USER
  }
];

const actions = [
  {
    name: Action.CREATE
  },
  {
    name: Action.READ
  },
  {
    name: Action.UPDATE
  },
  {
    name: Action.DELETE
  }
];

export async function up(knex: Knex): Promise<void> {
  return (
    Promise.resolve()
      // Create schema
      .then(() => knex.schema.raw('CREATE SCHEMA IF NOT EXISTS yars'))

      // Create tables
      .then(() =>
        knex.schema.withSchema('yars').createTable('group', (table) => {
          table.specificType('group_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .uuid('initiative_id')
            .references('initiative_id')
            .inTable('public.initiative')
            .onUpdate('CASCADE')
            .onDelete('CASCADE')
            .notNullable();
          table.text('name').notNullable();
          stamps(knex, table);
          table.unique(['initiative_id', 'name']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('role', (table) => {
          table.specificType('role_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          table.text('description');
          table.boolean('record_security').notNullable().defaultTo(false);
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('action', (table) => {
          table.specificType('action_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('resource', (table) => {
          table.specificType('resource_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('policy', (table) => {
          table.specificType('policy_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('resource_id')
            .notNullable()
            .references('resource_id')
            .inTable('yars.resource')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('action_id')
            .notNullable()
            .references('action_id')
            .inTable('yars.action')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['resource_id', 'action_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('attribute', (table) => {
          table.specificType('attribute_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          table.text('description');
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('group_role', (table) => {
          table.specificType('group_role_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('group_id')
            .notNullable()
            .references('group_id')
            .inTable('yars.group')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('role_id')
            .notNullable()
            .references('role_id')
            .inTable('yars.role')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['group_id', 'role_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('role_policy', (table) => {
          table.specificType('role_policy_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('role_id')
            .notNullable()
            .references('role_id')
            .inTable('yars.role')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('policy_id')
            .notNullable()
            .references('policy_id')
            .inTable('yars.policy')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['role_id', 'policy_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('policy_attribute', (table) => {
          table.specificType('policy_attribute', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('policy_id')
            .notNullable()
            .references('policy_id')
            .inTable('yars.policy')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('attribute_id')
            .notNullable()
            .references('attribute_id')
            .inTable('yars.attribute')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['policy_id', 'attribute_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('attribute_group', (table) => {
          table.specificType('attribute_group', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('attribute_id')
            .notNullable()
            .references('attribute_id')
            .inTable('yars.attribute')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('group_id')
            .notNullable()
            .references('group_id')
            .inTable('yars.group')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['attribute_id', 'group_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('identity_group', (table) => {
          table.specificType('identity_group_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('identity_id').notNullable();
          table
            .integer('group_id')
            .notNullable()
            .references('group_id')
            .inTable('yars.group')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['identity_id', 'group_id']);
        })
      )

      // Create before update triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_group_trigger
          BEFORE UPDATE ON yars."group"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_role_trigger
          BEFORE UPDATE ON yars."role"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_action_trigger
          BEFORE UPDATE ON yars."action"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_resource_trigger
          BEFORE UPDATE ON yars."resource"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_policy_trigger
          BEFORE UPDATE ON yars."policy"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_attribute_trigger
          BEFORE UPDATE ON yars."attribute"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_group_role_trigger
          BEFORE UPDATE ON yars."group_role"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_role_policy_trigger
          BEFORE UPDATE ON yars."role_policy"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_policy_attribute_trigger
          BEFORE UPDATE ON yars."policy_attribute"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_attribute_group_trigger
          BEFORE UPDATE ON yars."attribute_group"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_identity_group_trigger
          BEFORE UPDATE ON yars."identity_group"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      // Create audit triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_group_trigger
          AFTER UPDATE OR DELETE ON yars."group"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_role_trigger
          AFTER UPDATE OR DELETE ON yars."role"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_action_trigger
          AFTER UPDATE OR DELETE ON yars."action"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_resource_trigger
          AFTER UPDATE OR DELETE ON yars."resource"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_policy_trigger
          AFTER UPDATE OR DELETE ON yars."policy"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_attribute_trigger
          AFTER UPDATE OR DELETE ON yars."attribute"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_group_role_trigger
          AFTER UPDATE OR DELETE ON yars."group_role"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_role_policy_trigger
          AFTER UPDATE OR DELETE ON yars."role_policy"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_policy_attribute_trigger
          AFTER UPDATE OR DELETE ON yars."policy_attribute"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_attribute_group_trigger
          AFTER UPDATE OR DELETE ON yars."attribute_group"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_identity_group_trigger
          AFTER UPDATE OR DELETE ON yars."identity_group"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      // Populate Baseline Data
      .then(async () => {
        const exists = await knex('initiative').where({
          code: Initiative.PCNS
        });
        if (exists.length === 0) {
          const items = [
            {
              initiative_id: uuidv4(),
              code: Initiative.PCNS,
              label: 'Permit Connect Navigator Service'
            }
          ];
          return knex('initiative').insert(items);
        }
      })

      .then(async () => {
        const pcns_id = knex('initiative')
          .where({
            code: Initiative.PCNS
          })
          .select('initiative_id');

        const housing_id = knex('initiative')
          .where({
            code: Initiative.HOUSING
          })
          .select('initiative_id');

        const items = [
          {
            initiative_id: pcns_id,
            name: GroupName.DEVELOPER
          },
          {
            initiative_id: housing_id,
            name: GroupName.PROPONENT
          },
          {
            initiative_id: housing_id,
            name: GroupName.NAVIGATOR
          },
          {
            initiative_id: housing_id,
            name: GroupName.SUPERVISOR
          },
          {
            initiative_id: housing_id,
            name: GroupName.ADMIN
          }
        ];
        return knex('yars.group').insert(items);
      })

      .then(() => {
        return knex('yars.resource').insert(resources);
      })

      .then(() => {
        return knex('yars.action').insert(actions);
      })

      .then(() => {
        const items = [];
        for (const resource of resources) {
          for (const action of actions) {
            items.push({
              resource_id: knex('yars.resource').where({ name: resource.name }).select('resource_id'),
              action_id: knex('yars.action').where({ name: action.name }).select('action_id')
            });
          }
        }

        return knex('yars.policy').insert(items);
      })

      .then(async () => {
        const items: Array<{ name: string; description: string }> = [];

        const addRolesForResource = (resourceName: string) => {
          items.push(
            {
              name: `${resourceName.toUpperCase()}_CREATOR`,
              description: `Can create ${resourceName.toLowerCase()}s`
            },
            {
              name: `${resourceName.toUpperCase()}_VIEWER`,
              description: `Can view ${resourceName.toLowerCase()}s`
            },
            {
              name: `${resourceName.toUpperCase()}_EDITOR`,
              description: `Can edit ${resourceName.toLowerCase()}s`
            }
          );
        };

        for (const resource of resources) {
          addRolesForResource(resource.name);
        }

        return knex('yars.role').insert(items);
      })

      .then(async () => {
        return knex('yars.attribute').insert([
          {
            name: 'scope:all'
          },
          {
            name: 'scope:self'
          }
        ]);
      })

      .then(async () => {
        const policies = await knex
          .select('p.policy_id', 'r.name as resource_name', 'a.name as action_name')
          .from({ p: 'yars.policy' })
          .innerJoin({ r: 'yars.resource' }, 'p.resource_id', '=', 'r.resource_id')
          .innerJoin({ a: 'yars.action' }, 'p.action_id', '=', 'a.action_id');

        const items: Array<{ role_id: number; policy_id: number }> = [];

        const addRolePolicies = async (resourceName: string) => {
          const creatorId = await knex('yars.role')
            .where({ name: `${resourceName.toUpperCase()}_CREATOR` })
            .select('role_id');
          const viewerId = await knex('yars.role')
            .where({ name: `${resourceName.toUpperCase()}_VIEWER` })
            .select('role_id');
          const editorId = await knex('yars.role')
            .where({ name: `${resourceName.toUpperCase()}_EDITOR` })
            .select('role_id');

          const resourcePolicies = policies.filter((x) => x.resource_name === resourceName);
          items.push(
            {
              role_id: creatorId[0].role_id,
              policy_id: resourcePolicies.find((x) => x.action_name == Action.CREATE).policy_id
            },
            {
              role_id: viewerId[0].role_id,
              policy_id: resourcePolicies.find((x) => x.action_name == Action.READ).policy_id
            },
            {
              role_id: editorId[0].role_id,
              policy_id: resourcePolicies.find((x) => x.action_name == Action.UPDATE).policy_id
            },

            {
              role_id: editorId[0].role_id,
              policy_id: resourcePolicies.find((x) => x.action_name == Action.DELETE).policy_id
            }
          );
        };

        await addRolePolicies(Resource.DOCUMENT);
        await addRolePolicies(Resource.ENQUIRY);
        await addRolePolicies(Resource.NOTE);
        await addRolePolicies(Resource.PERMIT);
        await addRolePolicies(Resource.ROADMAP);
        await addRolePolicies(Resource.SSO);
        await addRolePolicies(Resource.SUBMISSION);
        await addRolePolicies(Resource.USER);

        return knex('yars.role_policy').insert(items);
      })

      .then(async () => {
        const housing_id = knex('initiative')
          .where({
            code: Initiative.HOUSING
          })
          .select('initiative_id');

        const navigator_group_id = await knex('yars.group')
          .where({ initiative_id: housing_id, name: GroupName.NAVIGATOR })
          .select('group_id');

        const proponent_group_id = await knex('yars.group')
          .where({ initiative_id: housing_id, name: GroupName.PROPONENT })
          .select('group_id');

        const items: Array<{ group_id: number; role_id: number }> = [];

        const addResourceRoles = async (group_id: number, resourceName: string) => {
          items.push(
            {
              group_id: group_id,
              role_id: (
                await knex('yars.role')
                  .where({ name: `${resourceName}_CREATOR` })
                  .select('role_id')
              )[0].role_id
            },
            {
              group_id: group_id,
              role_id: (
                await knex('yars.role')
                  .where({ name: `${resourceName}_VIEWER` })
                  .select('role_id')
              )[0].role_id
            },
            {
              group_id: group_id,
              role_id: (
                await knex('yars.role')
                  .where({ name: `${resourceName}_EDITOR` })
                  .select('role_id')
              )[0].role_id
            }
          );
        };

        /*
         * Add all navigator role mappings
         */
        for (const resource of resources) {
          await addResourceRoles(navigator_group_id[0].group_id, resource.name);
        }

        /*
         * Add all proponent role mappings
         */
        await addResourceRoles(proponent_group_id[0].group_id, Resource.DOCUMENT);
        await addResourceRoles(proponent_group_id[0].group_id, Resource.ENQUIRY);
        await addResourceRoles(proponent_group_id[0].group_id, Resource.NOTE);
        await addResourceRoles(proponent_group_id[0].group_id, Resource.PERMIT);
        await addResourceRoles(proponent_group_id[0].group_id, Resource.SUBMISSION);

        return knex('yars.group_role').insert(items);
      })

      .then(async () => {
        const action_create_id = await knex('yars.action').where({ name: Action.CREATE }).select('action_id');

        const scopeAllId = await knex('yars.attribute').where({ name: 'scope:all' }).select('attribute_id');
        const scopeSelfId = await knex('yars.attribute').where({ name: 'scope:self' }).select('attribute_id');

        const policies = await knex('yars.policy')
          .whereNot({ action_id: action_create_id[0].action_id })
          .select('policy_id');

        const items: Array<{ policy_id: number; attribute_id: number }> = [];

        for (const policy of policies) {
          items.push({ policy_id: policy.policy_id, attribute_id: scopeAllId[0].attribute_id });
          items.push({ policy_id: policy.policy_id, attribute_id: scopeSelfId[0].attribute_id });
        }

        return knex('yars.policy_attribute').insert(items);
      })

      .then(async () => {
        const housing_id = knex('initiative')
          .where({
            code: Initiative.HOUSING
          })
          .select('initiative_id');

        const navigator_group_id = await knex('yars.group')
          .where({ initiative_id: housing_id, name: GroupName.NAVIGATOR })
          .select('group_id');

        const proponent_group_id = await knex('yars.group')
          .where({ initiative_id: housing_id, name: GroupName.PROPONENT })
          .select('group_id');

        return knex('yars.attribute_group').insert([
          {
            attribute_id: (await knex('yars.attribute').where({ name: 'scope:all' }).select('attribute_id'))[0]
              .attribute_id,
            group_id: navigator_group_id[0].group_id
          },
          {
            attribute_id: (await knex('yars.attribute').where({ name: 'scope:self' }).select('attribute_id'))[0]
              .attribute_id,
            group_id: proponent_group_id[0].group_id
          }
        ]);
      })

      .then(async () => {
        await knex.raw(`create view yars.group_role_policy_vw as select
          row_number() OVER (),
          yars.group.group_id,
          public.initiative.code as initiative_code,
          yars.group.name as group_name,
          yars.role.name as role_name,
          yars.policy.policy_id as policy_id,
          yars.resource.name as resource_name,
          yars.action.name as action_name
        from yars.group
        inner join public.initiative on yars.group.initiative_id = public.initiative.initiative_id
        inner join yars.group_role on yars.group_role.group_id = yars.group.group_id
        inner join yars.role on yars.role.role_id = yars.group_role.role_id
        inner join yars.role_policy on yars.role_policy.role_id = yars.role.role_id
        inner join yars.policy on yars.policy.policy_id = yars.role_policy.policy_id
        inner join yars.resource on resource.resource_id = yars.policy.resource_id
        inner join yars.action on yars.action.action_id = yars.policy.action_id;`);
      })
  );
}

export async function down(knex: Knex): Promise<void> {
  return (
    Promise.resolve()
      // Drop yars views
      .then(() => knex.schema.withSchema('yars').dropViewIfExists('group_role_policy_vw'))

      // Drop yars audit triggers
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_identity_group_trigger ON yars."identity_group"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_attribute_group_trigger ON yars."attribute_group"'))
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS audit_role_policy_attribute_trigger ON yars."policy_attribute"')
      )
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_role_policy_trigger ON yars."role_policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_group_role_trigger ON yars."group_role"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_attribute_trigger ON yars."attribute"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_policy_trigger ON yars."policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_resource_trigger ON yars."resource"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_action_trigger ON yars."action"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_role_trigger ON yars."role"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_group_trigger ON yars."group"'))

      // Drop yars table triggers
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_identity_group_trigger ON yars."identity_group"')
      )
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_attribute_group_trigger ON yars."attribute_group"')
      )
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_policy_attribute_trigger ON yars."policy_attribute"')
      )
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_role_policy_trigger ON yars."role_policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_group_role_trigger ON yars."group_role"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_permission_trigger ON yars."policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_resource_trigger ON yars."resource"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_action_trigger ON yars."action"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_role_trigger ON yars."role"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_group_trigger ON yars."group"'))

      // Drop yars tables
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('identity_group'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('attribute_group'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('policy_attribute'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('role_policy'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('group_role'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('policy'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('resource'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('action'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('role'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('group'))

      // Drop yars schema
      .then(() => knex.schema.dropSchemaIfExists('yars'))
  );
}
