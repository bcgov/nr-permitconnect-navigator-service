/* eslint-disable max-len */
import { v4 as uuidv4 } from 'uuid';

import stamps from '../stamps';

import type { Knex } from 'knex';

const resources = [
  {
    name: 'document'
  },
  {
    name: 'enquiry'
  },
  {
    name: 'navigation'
  },
  {
    name: 'note'
  },
  {
    name: 'permit'
  },
  {
    name: 'roadmap'
  },
  {
    name: 'sso'
  },
  {
    name: 'submission'
  },
  {
    name: 'testing'
  },
  {
    name: 'user'
  }
];

const actions = [
  {
    name: 'create'
  },
  {
    name: 'read'
  },
  {
    name: 'update'
  },
  {
    name: 'delete'
  },
  {
    name: 'roleoverride'
  }
];

export async function up(knex: Knex): Promise<void> {
  return (
    Promise.resolve()
      // Create schema
      .then(() => knex.schema.raw('CREATE SCHEMA IF NOT EXISTS yars'))

      // Create tables
      .then(() =>
        knex.schema.withSchema('yars').createTable('role', (table) => {
          table.specificType('role_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.uuid('initiative_id');
          table.text('user_type').notNullable();
          stamps(knex, table);
          table.unique(['initiative_id', 'user_type']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('scope', (table) => {
          table.specificType('scope_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.integer('priority').notNullable();
          table.text('name').notNullable();
          table.text('description').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('policy', (table) => {
          table.specificType('policy_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('scope_id')
            .references('scope_id')
            .inTable('yars.scope')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table.text('name').notNullable();
          table.text('description').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('action', (table) => {
          table.specificType('action_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('resource', (table) => {
          table.specificType('resource_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('name').notNullable();
          stamps(knex, table);
          table.unique('name');
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('permission', (table) => {
          table.specificType('permission_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('resource_id')
            .notNullable()
            .references('resource_id')
            .inTable('yars.resource')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('action_id')
            .notNullable()
            .references('action_id')
            .inTable('yars.action')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['resource_id', 'action_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('role_policy', (table) => {
          table.specificType('role_policy_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('role_id')
            .notNullable()
            .references('role_id')
            .inTable('yars.role')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('policy_id')
            .notNullable()
            .references('policy_id')
            .inTable('yars.policy')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['role_id', 'policy_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('policy_permission', (table) => {
          table.specificType('policy_permission_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table
            .integer('policy_id')
            .notNullable()
            .references('policy_id')
            .inTable('yars.policy')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          table
            .integer('permission_id')
            .notNullable()
            .references('permission_id')
            .inTable('yars.permission')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['policy_id', 'permission_id']);
        })
      )

      .then(() =>
        knex.schema.withSchema('yars').createTable('identity_role', (table) => {
          table.specificType('identity_role_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
          table.text('identity_id').notNullable();
          table
            .integer('role_id')
            .notNullable()
            .references('role_id')
            .inTable('yars.role')
            .onUpdate('CASCADE')
            .onDelete('CASCADE');
          stamps(knex, table);
          table.unique(['identity_id', 'role_id']);
        })
      )

      // Create before update triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_role_trigger
          BEFORE UPDATE ON yars."role"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_scope_trigger
          BEFORE UPDATE ON yars."scope"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_policy_trigger
          BEFORE UPDATE ON yars."policy"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_action_trigger
          BEFORE UPDATE ON yars."action"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_resource_trigger
          BEFORE UPDATE ON yars."resource"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_permission_trigger
          BEFORE UPDATE ON yars."permission"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_role_policy_trigger
          BEFORE UPDATE ON yars."role_policy"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_policy_permission_trigger
          BEFORE UPDATE ON yars."policy_permission"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_identity_role_trigger
          BEFORE UPDATE ON yars."identity_role"
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      // Create audit triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_role_trigger
          AFTER UPDATE OR DELETE ON yars."role"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_scope_trigger
          AFTER UPDATE OR DELETE ON yars."scope"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_policy_trigger
          AFTER UPDATE OR DELETE ON yars."policy"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_action_trigger
          AFTER UPDATE OR DELETE ON yars."action"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_resource_trigger
          AFTER UPDATE OR DELETE ON yars."resource"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_role_policy_trigger
          AFTER UPDATE OR DELETE ON yars."role_policy"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_policy_permission_trigger
          AFTER UPDATE OR DELETE ON yars."policy_permission"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_identity_role_trigger
          AFTER UPDATE OR DELETE ON yars."identity_role"
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      // Populate Baseline Data
      .then(async () => {
        const housing_id = knex('initiative')
          .where({
            code: 'HOUSING'
          })
          .select('initiative_id');

        const items = [
          {
            user_type: 'developer'
          },
          {
            user_type: 'proponent'
          },
          {
            initiative_id: housing_id,
            user_type: 'navigator'
          },
          {
            initiative_id: housing_id,
            user_type: 'supervisor'
          },
          {
            initiative_id: housing_id,
            user_type: 'admin'
          }
        ];
        return knex('yars.role').insert(items);
      })

      .then(() => {
        const items = [
          {
            name: 'all',
            description: 'Allows access to all rows of a resource',
            priority: 0
          },
          {
            name: 'self',
            description: 'Allows access to rows created by the current user',
            priority: 1
          }
        ];
        return knex('yars.scope').insert(items);
      })

      .then(() => {
        return knex('yars.resource').insert(resources);
      })

      .then(() => {
        return knex('yars.action').insert(actions);
      })

      .then(() => {
        const items = [];
        for (const resource of resources) {
          for (const action of actions) {
            if (resource.name === 'testing' || action.name === 'roleoverride') continue;

            items.push({
              resource_id: knex('yars.resource').where({ name: resource.name }).select('resource_id'),
              action_id: knex('yars.action').where({ name: action.name }).select('action_id')
            });
          }
        }

        items.push({
          resource_id: knex('yars.resource').where({ name: 'testing' }).select('resource_id'),
          action_id: knex('yars.action').where({ name: 'roleoverride' }).select('action_id')
        });

        return knex('yars.permission').insert(items);
      })

      .then(async () => {
        const scopeIdAll = (await knex('yars.scope').where({ name: 'all' }).select('scope_id'))[0].scope_id;

        const items = [
          {
            name: 'document_manage_all',
            description: 'Full access to all document operations',
            scope_id: scopeIdAll
          },
          {
            name: 'enquiry_manage_all',
            description: 'Full access to all enquiry operations',
            scope_id: scopeIdAll
          },
          {
            name: 'note_manage_all',
            description: 'Full access to all note operations',
            scope_id: scopeIdAll
          },
          {
            name: 'permit_manage_all',
            description: 'Full access to all permit operations',
            scope_id: scopeIdAll
          },
          {
            name: 'roadmap_manage_all',
            description: 'Full access to all roadmap operations',
            scope_id: scopeIdAll
          },
          {
            name: 'sso_manage_all',
            description: 'Full access to all SSO operation operations',
            scope_id: scopeIdAll
          },
          {
            name: 'submission_manage_all',
            description: 'Full access to all submission operations',
            scope_id: scopeIdAll
          },
          {
            name: 'user_manage_all',
            description: 'Full access to all user operations',
            scope_id: scopeIdAll
          },
          {
            name: 'testing_all',
            description: 'Full access to all testing functionality'
          }
        ];

        return knex('yars.policy').insert(items);
      })

      .then(async () => {
        const permissions = await knex
          .select('p.permission_id', 'r.name as resource_name', 'a.name as action_name')
          .from({ p: 'yars.permission' })
          .innerJoin({ r: 'yars.resource' }, 'p.resource_id', '=', 'r.resource_id')
          .innerJoin({ a: 'yars.action' }, 'p.action_id', '=', 'a.action_id');

        const items: Array<{ policy_id: number; permission_id: number }> = [];

        const addPolicyPermissions = async (policyName: string, resourceName: string) => {
          const policy_id = await knex('yars.policy').where({ name: policyName }).select('policy_id');
          const resourcePerms = permissions.filter((x) => x.resource_name === resourceName);
          for (const p of resourcePerms) {
            items.push({
              policy_id: policy_id[0].policy_id,
              permission_id: p.permission_id
            });
          }
        };

        await addPolicyPermissions('document_manage_all', 'document');
        await addPolicyPermissions('enquiry_manage_all', 'enquiry');
        await addPolicyPermissions('note_manage_all', 'note');
        await addPolicyPermissions('permit_manage_all', 'permit');
        await addPolicyPermissions('roadmap_manage_all', 'roadmap');
        await addPolicyPermissions('sso_manage_all', 'sso');
        await addPolicyPermissions('submission_manage_all', 'submission');
        await addPolicyPermissions('user_manage_all', 'user');

        return knex('yars.policy_permission').insert(items);
      })

      .then(() => {
        const housing_id = knex('initiative')
          .where({
            code: 'HOUSING'
          })
          .select('initiative_id');

        const navigator_role_id = knex('yars.role')
          .where({ initiative_id: housing_id, user_type: 'navigator' })
          .select('role_id');

        const items = [
          /*
           * Add all navigator policy mappings
           */
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'document_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'enquiry_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'note_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'permit_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'roadmap_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'sso_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'submission_manage_all' }).select('policy_id')
          },
          {
            role_id: navigator_role_id,
            policy_id: knex('yars.policy').where({ name: 'user_manage_all' }).select('policy_id')
          }
        ];
        return knex('yars.role_policy').insert(items);
      })

      .then(async () => {
        await knex.raw(`create view yars.role_permission_vw as select
          lower(initiative.label) || '.' || role.user_type || '.' || policy.name || '.' || resource.name || '.' || action.name as pid,
          role.role_id,
          lower(initiative.label) as initiative_name,
          role.user_type,
          policy.name as policy_name,
          scope.name as scope_name,
          scope.priority as scope_priority,
          resource.name as resource_name,
          action.name as action_name
        from yars.role
        inner join public.initiative on yars.role.initiative_id = public.initiative.initiative_id
        inner join yars.role_policy on yars.role_policy.role_id = yars.role.role_id
        inner join yars.policy on yars.policy.policy_id = yars.role_policy.policy_id
        left join yars.scope on yars.policy.scope_id = yars.scope.scope_id
        inner join yars.policy_permission on yars.policy_permission.policy_id = yars.policy.policy_id
        inner join yars.permission on yars.permission.permission_id = yars.policy_permission.permission_id
        inner join yars.resource on resource.resource_id = yars.permission.resource_id
        inner join yars.action on yars.action.action_id = yars.permission.action_id;`);
      })
  );
}

export async function down(knex: Knex): Promise<void> {
  return (
    Promise.resolve()
      // Drop yars views
      .then(() => knex.schema.withSchema('yars').dropViewIfExists('role_permission_vw'))

      // Drop yars audit triggers
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_identity_role_trigger ON yars."identity_role"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_policy_permission_trigger ON yars."policy_permission"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_role_policy_trigger ON yars."role_policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_permission_trigger ON yars."permission"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_resource_trigger ON yars."resource"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_action_trigger ON yars."action"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_policy_trigger ON yars."policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_scope_trigger ON yars."scope"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_role_trigger ON yars."role"'))

      // Drop yars table triggers
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_identity_role_trigger ON yars."identity_role"'))
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_policy_permission_trigger ON yars."policy_permission"')
      )
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_role_policy_trigger ON yars."role_policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_permission_trigger ON yars."permission"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_resource_trigger ON yars."resource"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_action_trigger ON yars."action"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_policy_trigger ON yars."policy"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_scope_trigger ON yars."scope"'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_role_trigger ON yars."role"'))

      // Drop yars tables
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('identity_role'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('policy_permission'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('role_policy'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('permission'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('resource'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('action'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('policy'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('scope'))
      .then(() => knex.schema.withSchema('yars').dropTableIfExists('role'))

      // Drop yars schema
      .then(() => knex.schema.dropSchemaIfExists('yars'))
  );
}
