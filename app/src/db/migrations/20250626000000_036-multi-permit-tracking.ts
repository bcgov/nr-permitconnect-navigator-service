/* eslint-disable max-len */
import stamps from '../stamps';

import type { Knex } from 'knex';

export async function up(knex: Knex): Promise<void> {
  return Promise.resolve().then(() =>
    // Create public schema tables
    knex.schema
      .createTable('source_system_code', (table) => {
        table.text('code').primary().checkRegex('^ITSM-\\d{4,5}$');
        table.text('display').unique().notNullable();
        table.text('definition').notNullable();
        table.boolean('active').notNullable().defaultTo(true);
        stamps(knex, table);
      })

      .createTable('source_system_kind', (table) => {
        table.specificType('source_system_kind_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
        table.text('kind');
        table.text('description');
        table
          .text('source_system')
          .notNullable()
          .references('code')
          .inTable('source_system_code')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
        stamps(knex, table);
      })

      .createTable('permit_tracking', (table) => {
        table.specificType('permit_tracking_id', 'integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY');
        table
          .uuid('permit_id')
          .notNullable()
          .references('permit_id')
          .inTable('permit')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
        table.text('tracking_id');
        table
          .integer('source_system_kind_id')
          .nullable()
          .references('source_system_kind_id')
          .inTable('source_system_kind')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
        table.boolean('shown_to_proponent').notNullable().defaultTo(false);
        stamps(knex, table);
      })

      // Alter public schema tables
      .alterTable('permit_type', (table) => {
        table.dropColumn('source_system');
      })

      .alterTable('permit_type', (table) => {
        table
          .text('source_system')
          .nullable()
          .references('code')
          .inTable('source_system_code')
          .onUpdate('CASCADE')
          .onDelete('CASCADE');
      })

      // Create before update triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_source_system_code_trigger
          BEFORE UPDATE ON source_system_code
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_source_system_kind_trigger
          BEFORE UPDATE ON source_system_kind
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER before_update_permit_tracking_trigger
          BEFORE UPDATE ON permit_tracking
          FOR EACH ROW EXECUTE PROCEDURE public.set_updated_at();`)
      )

      // Create audit triggers
      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_source_system_code_trigger
          AFTER UPDATE OR DELETE ON source_system_code
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_source_system_kind_trigger
          AFTER UPDATE OR DELETE ON source_system_kind
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      .then(() =>
        knex.schema.raw(`CREATE TRIGGER audit_permit_tracking_trigger
          AFTER UPDATE OR DELETE ON permit_tracking
          FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();`)
      )

      // Populate source system codes
      .then(() => {
        return knex('source_system_code').insert([
          {
            code: 'ITSM-5314',
            display: 'ATS',
            definition: 'Authorization Tracking System'
          },
          {
            code: 'ITSM-5285',
            display: 'APTS',
            definition: 'Archaeology Permit Tracking System'
          },
          {
            code: 'ITSM-5364',
            display: 'CATS',
            definition: 'Contaminated Sites Application Tracking System'
          },
          // {
          //   code: '', // TODO: Not in Jira Assets. Transportation permits will have no associated system
          //   display: 'eDAS',
          //   definition: 'Electronic Development Approvals System',
          // },
          {
            code: 'ITSM-5527',
            display: 'ELIC',
            definition: 'eLicensing BC'
          },
          {
            code: 'ITSM-5939',
            display: 'PPA',
            definition: 'Electronic Park Use Permit System'
          },
          {
            code: 'ITSM-5644',
            display: 'FTA',
            definition: 'Forest Tenure Administration'
          },
          {
            code: 'ITSM-5816',
            display: 'MDS',
            definition: 'Mines Digital Services'
          },
          {
            code: 'ITSM-5963',
            display: 'RAR',
            definition: 'Riparian Areas Regulation Notification System'
          },
          {
            code: 'ITSM-6004',
            display: 'RRS',
            definition: 'Resource Roads System'
          },
          {
            code: 'ITSM-6030',
            display: 'SITE',
            definition: 'Site Information System'
          },
          {
            code: 'ITSM-6072',
            display: 'TANTALIS',
            definition: 'Tantalis'
          },
          {
            code: 'ITSM-6117',
            display: 'VFCBC',
            definition: 'Virtual FrontCounter BC (e-Licensing)'
          },
          {
            code: 'ITSM-5528',
            display: 'EMA',
            definition: 'Environmental Management Application'
          },
          {
            code: 'ITSM-6197',
            display: 'WMA',
            definition: 'Water Management Application'
          }
        ]);
      })

      // Populate source system kinds
      // Currently only descriptions as "kinds" have not been determined in PIES
      .then(() => {
        return knex('source_system_kind').insert([
          {
            description: 'Project Number',
            source_system: 'ITSM-5314'
          },
          {
            description: 'Application Number',
            source_system: 'ITSM-5285'
          },
          {
            description: 'Permit Number',
            source_system: 'ITSM-5285'
          },
          {
            description: 'Application ID',
            source_system: 'ITSM-5364'
          },
          // {
          //   description: 'File Number',
          //   source_system: '' // eDAS - not in Jira Assets
          // }
          {
            description: 'Authorization Number',
            source_system: 'ITSM-5939'
          },
          {
            description: 'Forest File ID',
            source_system: 'ITSM-5644'
          },
          {
            description: 'Tracking Number',
            source_system: 'ITSM-5816'
          },
          {
            description: 'Tracking Number',
            source_system: 'ITSM-5527'
          },
          {
            description: 'Forest File ID',
            source_system: 'ITSM-6004'
          },
          {
            description: 'Site ID',
            source_system: 'ITSM-6030'
          },
          {
            description: 'Business Area File Number',
            source_system: 'ITSM-6072'
          },
          {
            description: 'Tracking Number',
            source_system: 'ITSM-6117'
          },
          {
            description: 'Authorization Number',
            source_system: 'ITSM-5528'
          },
          {
            description: 'Tracking Number',
            source_system: 'ITSM-5528'
          },
          {
            description: 'File Number',
            source_system: 'ITSM-6197'
          },
          {
            description: 'Job Number',
            source_system: 'ITSM-6197'
          }
        ]);
      })

      // Split permit tracking ids
      .then(async () => {
        await knex.raw(`INSERT INTO public.permit_tracking (permit_id, tracking_id)
            SELECT permit_id, tracking_id
            FROM public.permit;`);
      })

      // Update permit_type to FK to new source_system_code
      .then(async () => {
        await knex.raw(`UPDATE public.permit_type SET (source_system) =
          (SELECT code
          FROM public.source_system_code
          WHERE source_system_code.display = public.permit_type.source_system_acronym);`);
      })

      .then(async () => {
        await knex.raw(`UPDATE public.permit_type SET (source_system) =
          (SELECT code
          FROM public.source_system_code
          WHERE source_system_code.display = 'RAR')
          WHERE public.permit_type.source_system_acronym = 'RARN';`);
      })

      .then(async () => {
        await knex.raw(`UPDATE public.permit_type SET (source_system) =
          (SELECT code
          FROM public.source_system_code
          WHERE source_system_code.display = 'PPA')
          WHERE public.permit_type.source_system_acronym = 'EPUPS';`);
      })

      // Drop old columns
      .then(() =>
        knex.schema.alterTable('permit', function (table) {
          table.dropColumn('tracking_id');
        })
      )

      .then(() =>
        knex.schema.alterTable('permit_type', function (table) {
          table.dropColumn('source_system_acronym');
        })
      )

      .then(() =>
        knex.schema.raw(`update public.permit_type
          set name = 'Short-term Water Use Approval'
          where name = 'Short-term Water use approval'
        `)
      )
  );
}

export async function down(knex: Knex): Promise<void> {
  return (
    Promise.resolve()
      // Add columns
      .then(() =>
        knex.schema.alterTable('permit_type', function (table) {
          table.text('source_system_code');
          table.text('source_system_acronym');
        })
      )

      .then(() =>
        knex.schema.alterTable('permit', function (table) {
          table.text('tracking_id');
        })
      )

      // Update permit_type to old source name/acronym
      .then(async () => {
        await knex.raw(`UPDATE public.permit_type SET (source_system_code, source_system_acronym) =
          (SELECT definition, display
          FROM public.source_system_code
          WHERE source_system_code.code = public.permit_type.source_system);`);
      })

      // Drop fk column then rename remade column to correct name
      .then(() =>
        knex.schema.alterTable('permit_type', function (table) {
          table.dropColumn('source_system');
        })
      )

      .then(() =>
        knex.schema.alterTable('permit_type', function (table) {
          table.renameColumn('source_system_code', 'source_system');
        })
      )

      // Add permit tracking ids back
      .then(() =>
        knex.schema.raw(`
          UPDATE public.permit AS p
            set tracking_id = pt.tracking_id
          FROM public.permit_tracking pt
          WHERE p.permit_id = pt.permit_id;`)
      )

      // Drop audit triggers
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_permit_tracking_trigger ON permit_tracking'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_source_system_kind_trigger ON source_system_kind'))
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS audit_source_system_code_trigger ON source_system_code'))

      // Drop public schema table triggers
      .then(() => knex.schema.raw('DROP TRIGGER IF EXISTS before_update_permit_tracking_trigger ON permit_tracking'))
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_source_system_kind_trigger ON source_system_kind')
      )
      .then(() =>
        knex.schema.raw('DROP TRIGGER IF EXISTS before_update_source_system_code_trigger ON source_system_code')
      )

      // Drop public schema tables
      .then(() => knex.schema.dropTableIfExists('permit_tracking'))
      .then(() => knex.schema.dropTableIfExists('source_system_kind'))
      .then(() => knex.schema.dropTableIfExists('source_system_code'))

      .then(() =>
        knex.schema.raw(`update public.permit_type
          set name = 'Short-term Water use approval'
          where name = 'Short-term Water Use Approval'
      `)
      )
  );
}
